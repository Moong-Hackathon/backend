name: CD (Main Deploy)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build without tests (prod profile)
        run: |
          set -eux
          ./gradlew clean assemble -Dspring.profiles.active=prod || { echo "Gradle build failed"; exit 1; }

      - name: List build/libs contents for debug
        run: ls -al build/libs

      - name: Check JAR file existence (dynamic version safe)
        run: |
          set -eux
          JAR_FILE=$(find build/libs -name "*.jar" | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "No JAR file found!"
            exit 1
          fi
          echo "JAR file found: $JAR_FILE"
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV

      - name: Deploy to Server
        if: success()
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          set -eux
          # Start ssh-agent and add the private key
          eval "$(ssh-agent -s)"
          echo "$SSH_KEY" | tr -d '\r' > private_key.pem
          chmod 600 private_key.pem
          ssh-add private_key.pem

          # Stop any running application, clean old files and create target directory
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
          set -eux
          echo "Stopping existing application if running..."
          pkill -f 'java -jar' || true
          echo "Cleaning up old files..."
          rm -rf ~/backend/build/libs/*
          echo "Creating target directory if not exists..."
          mkdir -p ~/backend/build/libs/
          EOF

          # Copy the built JAR file to the server
          scp "$JAR_FILE" $SSH_USER@$SSH_HOST:~/backend/build/libs/

          # Start the application on the server with prod profile
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
          set -eux
          echo "Deploying application..."
          pkill -f 'java -jar' || true
          cd ~/backend/build/libs
          ls -al
          nohup java -jar -Dspring.profiles.active=prod *.jar > app.log 2>&1 &
          echo "Application started."
          EOF

      - name: Clean up
        if: success()
        run: rm -f private_key.pem
